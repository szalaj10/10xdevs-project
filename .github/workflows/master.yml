name: Deploy to Cloudflare Pages

on:
  push:
    branches: [master]
  workflow_dispatch: {}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node and install
        uses: ./.github/actions/node-setup

      - name: Run ESLint
        run: npm run lint

  unit-tests:
    name: Unit tests
    needs: lint
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      GROQ_MODEL: ${{ secrets.GROQ_MODEL }}
      GROQ_BASE_URL: ${{ secrets.GROQ_BASE_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node and install
        uses: ./.github/actions/node-setup

      - name: Run unit tests with coverage (Vitest)
        run: npm run test:coverage

      - name: Upload unit coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-coverage
          path: coverage
          retention-days: 7

  deploy:
    name: Deploy to Cloudflare Pages
    needs: [lint, unit-tests]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    env:
      PUBLIC_SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      PUBLIC_SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
      SUPABASE_URL: ${{ secrets.PUBLIC_SUPABASE_URL }}
      SUPABASE_KEY: ${{ secrets.PUBLIC_SUPABASE_KEY }}
      GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
      GROQ_MODEL: ${{ secrets.GROQ_MODEL }}
      GROQ_BASE_URL: ${{ secrets.GROQ_BASE_URL }}
      CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Node and install
        uses: ./.github/actions/node-setup

      - name: Check Cloudflare secrets
        run: |
          echo "================================"
          echo "üîç CHECKING CLOUDFLARE SECRETS"
          echo "================================"
          echo ""
          
          MISSING_SECRETS=0
          
          echo "1Ô∏è‚É£ Checking CLOUDFLARE_API_TOKEN..."
          if [ -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            echo "   ‚ùå CLOUDFLARE_API_TOKEN is NOT set"
            echo "   üìù How to fix:"
            echo "      - Go to: https://dash.cloudflare.com/profile/api-tokens"
            echo "      - Create token with 'Cloudflare Pages: Edit' permission"
            echo "      - Add to GitHub: Settings > Secrets > Actions > New secret"
            echo "      - Name: CLOUDFLARE_API_TOKEN"
            MISSING_SECRETS=$((MISSING_SECRETS + 1))
          else
            TOKEN_LENGTH=${#CLOUDFLARE_API_TOKEN}
            echo "   ‚úÖ CLOUDFLARE_API_TOKEN is set (length: $TOKEN_LENGTH characters)"
          fi
          echo ""
          
          echo "2Ô∏è‚É£ Checking CLOUDFLARE_ACCOUNT_ID..."
          if [ -z "${{ secrets.CLOUDFLARE_ACCOUNT_ID }}" ]; then
            echo "   ‚ùå CLOUDFLARE_ACCOUNT_ID is NOT set"
            echo "   üìù How to fix:"
            echo "      - Go to: https://dash.cloudflare.com/"
            echo "      - Find 'Account ID' in right sidebar"
            echo "      - Add to GitHub: Settings > Secrets > Actions > New secret"
            echo "      - Name: CLOUDFLARE_ACCOUNT_ID"
            MISSING_SECRETS=$((MISSING_SECRETS + 1))
          else
            ACCOUNT_LENGTH=${#CLOUDFLARE_ACCOUNT_ID}
            echo "   ‚úÖ CLOUDFLARE_ACCOUNT_ID is set (length: $ACCOUNT_LENGTH characters)"
          fi
          echo ""
          
          echo "3Ô∏è‚É£ Checking CLOUDFLARE_PROJECT_NAME..."
          if [ -z "${{ secrets.CLOUDFLARE_PROJECT_NAME }}" ]; then
            echo "   ‚ùå CLOUDFLARE_PROJECT_NAME is NOT set"
            echo "   üìù How to fix:"
            echo "      - Choose a name (e.g., '10xdevs-flashcards')"
            echo "      - Only lowercase letters, numbers, and hyphens"
            echo "      - Add to GitHub: Settings > Secrets > Actions > New secret"
            echo "      - Name: CLOUDFLARE_PROJECT_NAME"
            MISSING_SECRETS=$((MISSING_SECRETS + 1))
          else
            echo "   ‚úÖ CLOUDFLARE_PROJECT_NAME is set: '$CLOUDFLARE_PROJECT_NAME'"
          fi
          echo ""
          
          echo "================================"
          if [ $MISSING_SECRETS -eq 0 ]; then
            echo "‚úÖ ALL SECRETS ARE CONFIGURED!"
            echo "================================"
          else
            echo "‚ùå MISSING $MISSING_SECRETS SECRET(S)!"
            echo "================================"
            echo ""
            echo "üîó Quick link to add secrets:"
            echo "   https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo ""
            echo "üìö Full documentation:"
            echo "   See CLOUDFLARE_DEPLOYMENT_SETUP.md in your repository"
            exit 1
          fi
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_PROJECT_NAME: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}

      - name: Build project
        run: npm run build

      - name: Verify build output
        run: |
          echo "================================"
          echo "üîç VERIFYING BUILD OUTPUT"
          echo "================================"
          echo ""
          
          if [ ! -d "dist" ]; then
            echo "‚ùå ERROR: dist directory does not exist!"
            echo ""
            echo "This means the build failed or generated files elsewhere."
            echo "Check the 'Build project' step above for errors."
            exit 1
          fi
          
          echo "‚úÖ dist directory exists"
          echo ""
          
          # Count files
          FILE_COUNT=$(find dist -type f | wc -l)
          DIR_SIZE=$(du -sh dist | cut -f1)
          
          echo "üìä Build statistics:"
          echo "   - Total files: $FILE_COUNT"
          echo "   - Total size: $DIR_SIZE"
          echo ""
          
          echo "üìÅ Directory structure:"
          ls -lah dist/
          echo ""
          
          # Check for critical files
          echo "üîç Checking for critical files:"
          if [ -f "dist/_worker.js" ]; then
            WORKER_SIZE=$(du -h dist/_worker.js | cut -f1)
            echo "   ‚úÖ _worker.js found (size: $WORKER_SIZE)"
          else
            echo "   ‚ö†Ô∏è  _worker.js not found (this is the Cloudflare Worker entry point)"
          fi
          
          if [ -d "dist/_astro" ]; then
            ASTRO_FILES=$(find dist/_astro -type f | wc -l)
            echo "   ‚úÖ _astro directory found ($ASTRO_FILES files)"
          else
            echo "   ‚ö†Ô∏è  _astro directory not found"
          fi
          
          echo ""
          echo "================================"
          echo "‚úÖ BUILD VERIFICATION COMPLETE"
          echo "================================"

      - name: Prepare deployment info
        run: |
          echo "================================"
          echo "üöÄ PREPARING CLOUDFLARE DEPLOYMENT"
          echo "================================"
          echo ""
          echo "üì¶ Project: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}"
          echo "üìÅ Directory: dist"
          echo "üåç Target: Cloudflare Pages"
          echo ""
          echo "Deployment will be available at:"
          echo "https://${{ secrets.CLOUDFLARE_PROJECT_NAME }}.pages.dev"
          echo ""
          echo "================================"

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy dist --project-name=${{ secrets.CLOUDFLARE_PROJECT_NAME }} --branch=main

      - name: Deployment summary
        if: success()
        run: |
          echo ""
          echo "================================"
          echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
          echo "================================"
          echo ""
          echo "üéâ Your application has been deployed to Cloudflare Pages!"
          echo ""
          echo "üîó URLs:"
          echo "   Production: https://${{ secrets.CLOUDFLARE_PROJECT_NAME }}.pages.dev"
          echo "   Dashboard: https://dash.cloudflare.com/"
          echo ""
          echo "üìä Next steps:"
          echo "   1. Visit your site to verify it works"
          echo "   2. Check Cloudflare Dashboard for deployment details"
          echo "   3. Configure custom domain (optional)"
          echo ""
          echo "================================"

      - name: Deployment failed
        if: failure()
        run: |
          echo ""
          echo "================================"
          echo "‚ùå DEPLOYMENT FAILED"
          echo "================================"
          echo ""
          echo "Common issues:"
          echo ""
          echo "1Ô∏è‚É£ Invalid API Token"
          echo "   - Check token has 'Cloudflare Pages: Edit' permission"
          echo "   - Verify token hasn't expired"
          echo ""
          echo "2Ô∏è‚É£ Wrong Account ID"
          echo "   - Must be 32-character hash from Cloudflare Dashboard"
          echo ""
          echo "3Ô∏è‚É£ Invalid Project Name"
          echo "   - Only lowercase letters, numbers, and hyphens allowed"
          echo "   - Current: ${{ secrets.CLOUDFLARE_PROJECT_NAME }}"
          echo ""
          echo "4Ô∏è‚É£ Build output issues"
          echo "   - Check if dist directory contains valid files"
          echo ""
          echo "üìö Full troubleshooting guide:"
          echo "   See CLOUDFLARE_DEPLOYMENT_TROUBLESHOOTING.md"
          echo ""
          echo "üîó Quick link to secrets:"
          echo "   https://github.com/${{ github.repository }}/settings/secrets/actions"
          echo ""
          echo "================================"

